import java.util.Scanner;

class Product {
    String name;
    double price;

    Product(String name, double price) {
        this.name = name;
        this.price = price;
    }
}

class DiscountRule {
    int threshold;
    double discountAmount;
    int quantityThreshold;
    int productThreshold;
    double discountPercentage;

    DiscountRule(int threshold, double discountAmount, int quantityThreshold, int productThreshold, double discountPercentage) {
        this.threshold = threshold;
        this.discountAmount = discountAmount;
        this.quantityThreshold = quantityThreshold;
        this.productThreshold = productThreshold;
        this.discountPercentage = discountPercentage;
    }
}

public class ShoppingCart {
    static final double GIFT_WRAP_FEE = 1.0;
    static final double SHIPPING_FEE_PER_PACKAGE = 5.0;
    static final int PRODUCTS_PER_PACKAGE = 10;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Product[] catalog = {
                new Product("Product A", 20.0),
                new Product("Product B", 40.0),
                new Product("Product C", 50.0)
        };

        DiscountRule[] discountRules = {
                new DiscountRule(200, 10.0, 0, 0, 0),
                new DiscountRule(0, 0, 10, 0, 5.0),
                new DiscountRule(0, 0, 20, 0, 10.0),
                new DiscountRule(30, 0, 15, 50, 0)
        };

        int numProducts = catalog.length;
        int totalQuantity = 0;
        double subtotal = 0.0;
        double totalDiscount = 0.0;
        double shippingFee = 0.0;
        double giftWrapFee = 0.0;

        // Input quantities and gift wrap info
        for (Product product : catalog) {
            System.out.print("Enter the quantity for " + product.name + ": ");
            int quantity = scanner.nextInt();
            totalQuantity += quantity;
            subtotal += quantity * product.price;

            System.out.print("Is the product wrapped as a gift? (1 for Yes, 0 for No): ");
            int isGiftWrapped = scanner.nextInt();
            giftWrapFee += isGiftWrapped == 1 ? quantity * GIFT_WRAP_FEE : 0.0;
        }

        // Calculate discounts
        for (Product product : catalog) {
            System.out.println("\nProduct: " + product.name);
            System.out.println("Quantity: " + totalQuantity);

            double productTotal = product.price * totalQuantity;
            subtotal += productTotal;

            double discount = 0.0;
            for (DiscountRule rule : discountRules) {
                if (rule.threshold > 0 && totalQuantity > rule.threshold) {
                    discount = rule.discountAmount;
                } else if (totalQuantity > rule.quantityThreshold && totalQuantity > rule.productThreshold) {
                    discount = (totalQuantity - rule.productThreshold) * (product.price * rule.discountPercentage / 100);
                }
            }

            if (discount > 0.0) {
                totalDiscount += discount;
                System.out.println("Discount Applied: tiered_50_discount - Discount Amount: $" + discount);
            }

            System.out.println("Total Amount: $" + productTotal);
        }

        shippingFee = calculateShippingFee(totalQuantity);

        System.out.println("\nSubtotal: $" + subtotal);
        System.out.println("Shipping Fee: $" + shippingFee);
        System.out.println("Gift Wrap Fee: $" + giftWrapFee);

        double total = subtotal - totalDiscount + shippingFee + giftWrapFee;
        System.out.println("Total: $" + total);

        scanner.close();
    }

    static double calculateShippingFee(int totalQuantity) {
        int numPackages = totalQuantity / PRODUCTS_PER_PACKAGE;
        if (totalQuantity % PRODUCTS_PER_PACKAGE != 0) {
            numPackages++;
        }
        return numPackages * SHIPPING_FEE_PER_PACKAGE;
    }
}
